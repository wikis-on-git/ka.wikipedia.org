[[Image:Programming-republic-of-perl.gif|პერლის ლოგო]]


'''პერლი''' (PERL), დაპროგრამების სტრუქტურული ენა, შექმნილი 1987 წელს ლარი უოლის მიერ. პერლში გაერთიანებულია C-ის, shell–ის, awk–ს, sed–ის, Lisp–ის და დაპროგრამების სხვა ენების ნიშან–თვისებები.
==ზოგადი მიმოხილვა==
პერლ–ის ოფიციალური საინფორმაციო წყაროების ცნობით პერლი არის: "ზოგადი დანიშნულების დაპროგრამების ენა, რომელიც თავდაპირველად შეიქმნა ტექსტური მანიპულაციებისათვის, თუმცა ახლა გამოიყენება მრავალი ტიპის ამოცანების გადაჭრისას, მათ შორის სისტემური ადმინისტრირების, ვებ–განვითარების, ქსელური პროგრამირების, GUI–ის (მომხმარებლის გრაფიკული ინტერფეისის) განვითარების და სხვ. ენის შემქმნელები შეეცადნენ, რომ ენა ყოფილიყო უფრო პრაქტიკული და ადვილად გამოსაყენებადი, ვიდრე ლამაზი და ესთეტური. მისი უმნიშვნელოვანესი მახასიათებლები არის: გამოყენების სიადვილე, ობიექტურად ორიენტირებული და სტრუქტურული პროგრემირების მხარდაჭერა, ტექსტის ეფექტური დამუშავების შიგ ჩაშენებული მექანიზმი და მოდულების უზარმაზარი ბიბლიოთეკა.
==ენის სტრუქტურა==
===მაგალითი===
პერლ–ზე დაწერილი Hello world-ის კანონიკური პროგრამა ასე გამოიყურება:

 <nowiki>#</nowiki>!/usr/bin/perl
 print "Hello, world!\n";

პირველი სტრიქონი ეუბნება იუნიქსის ოპერაციულ სისტემა თუ სად მიაგნოს პერლის ინტერპრეტატორს. მეორე სტრიქონი ბეჭდავს ეკრანზე Hello, world–ს და კურსორი ახალ ხაზზე გადააქვს.
===მონაცემთა ტიპები===
პერლ–ს თავის არსენალში მონაცემთა სამი ფუნდამენტური ტიპი გააჩნია: სკალარი, მასივი/სია და ჰეშ ცხრილი:
*სკალარი არის ერთეულოვანი მონაცემი. ის შეიძლება იყოს რიცხვი, სტრიქონი ან მითითება.
*სია არის სკალართა მოწესრიგებული მიმდევრობა. 
*ჰეშ–ცხრილი (ასოციაციური მასივი) ქმნის ასოციაციურ კავშირებს სტრიქონებსა და სკალარებს შორის, რომელთაგან სტრიქონებს "გასაღები" ეწოდებათ, სკალარებს კი "მნიშვნელობა"
თითოეულ ცვლადს წინ წამძღვარებული აქვს განსაზღვრული სიმბოლო, რომლის საშუალებითაც ინტერპრეტატორი არკვევს რომელი ტიპის მონაცემთა ტიპთან გვაქვს საქმე.

  $foo   # სკალარი
  @foo   # სია
  %foo   # ჰეშ–ცხრილი

სკალარულ ცვლადებს რიცხვები ჩვეულებრივი გზით ენიჭებათ. სტრიქონი კი ბრჭყალებით უნდა იყოს შემოსაზღვრული.

  $n     = 42;
  $name  = "joe";
  $color = 'red';

სიის ტიპის ცვლადის ინიციალიზაცია ხდება შემდეგნაირად, ფრჩხილებში მოთავსებული, მძიმეებით გამოყოფილი ელემენტების საშუალებით:
  @scores = (32, 45, 16, 5);

ჰეშ–ცხრილის ინიციალიზაცია ხდება გასაღები–მნიშვნელობის წყვილის განსაზღვრით:
  %favorite = (joe => 'red',
               sam => 'blue');

სიის თითოეულ ელემენტს შეიძლება მივაგნოთ ინდექსის საშუალებით, ჰეშ–ცხრილისას კი გასაღების მითითებით. სიის ინდექსი უნდა იყოს მოთავსებული კუთხურ ფრჩხილებში, ჰეშ–ცხრილის გასაღები კი – ფიგურულში.

  $scores[2]      # @scores მე–2 სიის ელემენტი
  $favorite{joe}  # %favorite ჰეშ–ცხრილის ელემენტი

რამდენიმე ელემენტს შეიძლება მივწვდეთ სიის იდენტიფიკატორის <tt>@</tt> საშუალებით:

  @scores[2, 3, 1]    # @scores სიის სამი ელემენტი
  @favorite{'joe', 'sam'} # %favorite ორი გასაღების მნიშვნელობა

სიის ელემენტთა რაოდენობა შეიძლება გავიგოთ, თუ ამ სიას სკალარულ ცვლადს მივანიჭებთ

  $count = @friends;

ჰეშ–ცხრილიდან გასაღებების ან მნიშვნელობების მასივის ამოღება შეიძლება შემდეგნაირად:

  @names     = keys   %address;
  @addresses = values %address;

===მართვის სტრუქტურები===
პერლში რამდენიმე ტიპის მართვის სტრუქტურაა.
ბლოკურად ორიენტირებული მართვის სტრუქტურები, მსგავსი C-ს Java–ს ბლოკურად ორიენტირებული მართვის სტრუქტურების. განშტოების ოპერატორის თუ ციკლის ოპერატორის პირობა შემოსაზღვრული უნდა იყოს ფრჩხილებით, მართვის ბლოკი კი ფიგურული ფრჩხილებით:

 ''label'' while ( ''cond'' ) { ... }
 ''label'' while ( ''cond'' ) { ... } continue { ... }
 ''label'' for ( ''init-expr'' ; ''cond-expr'' ; ''incr-expr'' ) { ... }
 ''label'' foreach ''var'' ( ''list'' ) { ... }
 ''label'' foreach ''var'' ( ''list'' ) { ... } continue { ... }
 if ( ''cond'' ) { ... }
 if ( ''cond'' ) { ... } else { ... } 
 if ( ''cond'' ) { ... } elsif ( ''cond'' ) { ... } else { ... } 

თუ კი ბლოკი მოიცავს მხოლოდ ერთ წინადადებას, მაშინ შესაძლებელია ასეთი ჩანაწერიც ფიგურული ფრჩხილების გარეშე:

 ''statement'' if      ''cond'' ;
 ''statement'' unless  ''cond'' ;
 ''statement'' while   ''cond'' ;
 ''statement'' until   ''cond'' ;
 ''statement'' foreach ''list'' ;

შემოკლებული ლოგიკური გამოსახულების მაგალითი, რომლის ანალოგი არ არის C და Java–ში
 ''expr'' and ''expr''
 ''expr'' or  ''expr''

===სუბრუტინები===
სუბრუტინა განისაზღვრება sub ოპერატორის საშუალებით და შემდგომ შეიძლება გამოვიძახოთ სახელის საშუალებით. სუბრუტინას განსაზღვრა შეიძლება პროგრამის ნებისმიერ ადგილას. სუბრუტინას გამოძახების დროს სუბრუტინას სახელი აუცილებლად უნდა იყოს დასრულებული ფრჩხილებით და წინადადების დასრულების ოპერატორით (;).

 foo();
 sub foo { ... }
 foo;

სუბრუტინას შეიძლება გადავცეთ ერთი ან რამდენიმე არგუმენტი:
 foo $x, @y, %z;

სუბრუტინას პარამეტრების განსაზღვრა საჭირო არ არის. რამდენი არგუმენტიც არ უნდა გადავცეთ სუბრუტინას, მათ შეიძლება მივწვდეთ <tt>@_</tt>–ს საშუალებით.

<tt>@_</tt> ელემენტებს შეიძლება მივწვდეთ ინდექსის მითითებით შემდეგნაირად:

 $_[0], $_[1]

სუბრუტინა შესაძლებელია აბრუნებდეს მნიშვნელობასაც:

 return 42, $x, @y, %z;

===რეგულარული გამოსახულებები===

პერლი შეიცავს სპეციალიზებული სინტაქსის მქონე გამოსახულებებს, რეგულარულ გამოსახულებებს, რომლებიც ამარტივებენ ტექსტთან ურთიერთობას.
რეგულარულ გამოსახულებებს პერლის გარდა იყენებს მრავალი პლატფორმა თუ ენა, დღესდღეობით რეგულარული გამოსახულებები აღიარებული სტანდარტია.

  $x = "abcdefgh";
  $x =~ m/abc/

მოცემული გამოსახულება იქნება true თუ სტრიქონი შეიცავს მითითებული სიმბოლოების წყებას, თუ არადა false. 

შესაძლებელია მოდიფიკატორების მითითება, მაგალითად: 
  $x =~ m/abc/i;      # case-insensitive pattern match
  $x =~ s/abc/aBc/g;  # global search and replace

ერთი შეხედვით რეგულარული გამოსახულება შეიძლება იყოს ძალიან ჩახლართული და ძნელად გარჩევადი.

  $x =~ s/^([0-2]\d:[0-5]\d:[0-5]\d)\s+\[([^\]]+)\]\s+(.*)$/g;

[[bs:Perl]] 
[[bg:Perl]]
[[ca:Perl]]
[[cs:Perl]]
[[cy:Perl]]
[[da:Perl]]
[[de:Perl]]
[[en:Perl]]
[[eo:Perl (programlingvo)]]
[[es:Perl]]
[[et:Perl]]
[[fa:پرل]]
[[fi:Perl]]
[[fr:Perl (langage)]]
[[gl:Perl]] 
[[he:Perl]]
[[hr:Perl]]
[[hu:Perl programozási nyelv]]
[[id:Perl]]
[[it:Perl]]
[[ja:Perl]]
[[ko:펄]]
[[ku:Perl]] 
[[la:Perl]]
[[lb:Perl (Programméiersprooch)]]
[[lt:Perl]]
[[nl:Perl (programmeertaal)]]
[[nn:Perl]] 
[[no:Perl]]
[[pl:Perl]]
[[pt:Perl]]
[[ru:Перл (язык программирования)]]
[[sk:Perl]]
[[sl:Perl]]
[[sr:Perl]]
[[sv:Perl]]
[[th:ภาษาเพิร์ล]]
[[tr:Perl]]
[[zh:Perl]]
